# .travis.yml based on
# https://github.com/DRMacIver/hypothesis/blob/master/.travis.yml
# Setting the language to C overrides our CC environment variable
# and disables ccache.
# Setting it to python overrides our TRAVIS_PYTHON_VERSION (which
# we're only using in hopes of being able to go *back* to using
# python: one day so making the migration simpler)
language: minimal
dist: xenial
group: travis_latest

env:
    global:
        - BUILD_RUNTIMES=$HOME/.runtimes
        - PYTHONHASHSEED=8675309
        - CC="ccache gcc"
        - CCACHE_NOCPP2=true
        - CCACHE_SLOPPINESS=file_macro,time_macros,include_file_ctime,include_file_mtime
        - CCACHE_NOHASHDIR=true
        # CCache stats are useful for debugging, but we see them producing
        # surprising Travis cache writes that we don't expect.
        - CCACHE_NOSTATS=true
        - BUILD_LIBS=$HOME/.libs
        - CFLAGS="-g -pipe"
        - CPPFLAGS="-I$BUILD_LIBS/include"
        - LDFLAGS="-L$BUILD_LIBS/lib"
        - LD_LIBRARY_PATH="$BUILD_LIBS/lib"

    # Note that this list is again *manually* expanded
    # for the 'cache' stage. The benefit of doing this (instead of
    # only listing a single version here, or using a different 'language')
    # is that we get separate caches per version. This keeps them small,
    # and prevents stepping on each other when we change Python minor
    # versions.

    # We do it here, rather than with the python: keyword
    # because the way travis handles pypy is pretty messed up.

    # Recall that unless otherwise specified, jobs inherit
    # the first entry in this list.
    matrix:
      - TRAVIS_PYTHON_VERSION=2.7
      - TRAVIS_PYTHON_VERSION=3.5
      - TRAVIS_PYTHON_VERSION=3.6
      - TRAVIS_PYTHON_VERSION=3.7
      - TRAVIS_PYTHON_VERSION=pypy2.7
      - TRAVIS_PYTHON_VERSION=pypy3.6

matrix:
  fast_finish: true

stages:
  - build-gevent
  - test

jobs:
  include:
    - &build-gevent
      stage: build-gevent
      install:
        # Install the Python runtime
        - time ./scripts/install.sh $TRAVIS_PYTHON_VERSION
      script: true
      before_script: true
    - <<: *build-gevent
      env: TRAVIS_PYTHON_VERSION=3.5
    - <<: *build-gevent
      env: TRAVIS_PYTHON_VERSION=3.6
    - <<: *build-gevent
      env: TRAVIS_PYTHON_VERSION=3.7
    - <<: *build-gevent
      env: TRAVIS_PYTHON_VERSION=pypy2.7
    - <<: *build-gevent
      env: TRAVIS_PYTHON_VERSION=pypy3.6

    # This job is in addition to the jobs defined by the 'env' matrix;
    # it shares the Travis cache with the first job defined there.
    - stage: test
      install:
        # Install the C dependencies to a known location. This is used
        # to test "no embed" cases. It might seem like it would prime
        # the CCache for when we *do* embed if we did it as part of the generic build stage,
        # but overall it just seems to slow things down. The Travis caching and CCache is not working as
        # well as we would hope.
        - pushd deps/libev && ./configure --prefix=$BUILD_LIBS && make install && popd
        - pushd deps/c-ares && ./configure --prefix=$BUILD_LIBS && make install && popd
        - pushd deps/libuv && ./autogen.sh && ./configure --disable-static --prefix=$BUILD_LIBS && make install && popd
        - ls -l $BUILD_LIBS $BUILD_LIBS/lib
        - >
          EMBED=0
          python -m pip install --no-warn-script-location -r dev-requirements.txt

before_install:
  - export PATH=$BUILD_RUNTIMES/snakepit/$TRAVIS_PYTHON_VERSION.d/bin:$PATH

before_script:
  # Show some details of interest
  - >
    python -c "import greenlet; print(greenlet, greenlet.__version__)"
  - >
    python -c "import gevent.core; print(gevent.core.loop)"
  - >
    python -c "import gevent.ares; print(gevent.ares)"

install:
  - ls -l $BUILD_RUNTIMES/snakepit/
  - echo $BUILD_RUNTIMES/snakepit/$TRAVIS_PYTHON_VERSION.d
  - ls -l $BUILD_RUNTIMES/snakepit/$TRAVIS_PYTHON_VERSION.d
  - &install-gevent >
      GEVENTSETUP_EV_VERIFY=3
      python -m pip install --no-warn-script-location -r dev-requirements.txt
script:
  # XXX: Get folding back. The output gets really long. Or reduce the
  # output further from the test runner.

  # First, test all the defaults (backend is platform default libev,
  # resolver is thread, fileobject is posix, modules cython compiled
  # on CPython). Run all this with test coverage enabled, if possible
  - if [[ $TRAVIS_PYTHON_VERSION != pypy* ]]; then export GEVENTTEST_COVERAGE=1; fi
  - python -m gevent.tests
  # Next, test the two different resolvers
  - GEVENT_RESOLVER=ares python -mgevent.tests --ignore tests_that_dont_use_resolver.txt
  - GEVENT_RESOLVER=dnspython python -mgevent.tests --ignore tests_that_dont_use_resolver.txt

  # Now test the alternate backends, starting with libuv-cffi, which should be present everywhere
  - GEVENT_LOOP=libuv python -mgevent.tests
  # Next the libev-cffi backend, which is only needed on CPython (default on PyPy)
  - if [[ $TRAVIS_PYTHON_VERSION != pypy* ]]; then GEVENT_LOOP=libev-cffi python -mgevent.tests; fi
  # No compiled cython modules on CPython, using the default backend
  - if [[ $TRAVIS_PYTHON_VERSION != pypy* ]]; then PURE_PYTHON=1 python -mgevent.tests; fi
  # Stop asking for coverage
  - unset GEVENTTEST_COVERAGE

  # Now, the non-default threaded file object.
  # In the past, we included all test files that had a reference to 'subprocess'' somewhere in their
  # text. The monkey-patched stdlib tests were specifically included here.
  # However, we now always also test on AppVeyor (Windows) which only has GEVENT_FILE=thread,
  # so we can save a lot of CI time by reducing the set and excluding the stdlib tests without
  # losing any coverage. Which is good, because coverage fails when run this way.
  - (cd src/gevent/tests && GEVENT_FILE=thread python -mgevent.tests test__*subprocess*.py)
  # Run the leaktests; this seems to be extremely slow on Python 3.7
  # XXX: Figure out why. Can we reproduce locally?
  - if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then GEVENTTEST_LEAKCHECK=1 python -m gevent.tests --ignore tests_that_dont_do_leakchecks.txt; fi

  # lint the code. Do this last; we still want it to fail the build,
  # but we should run the tests too --- we spent all that time setting it up already.
  # We only need to do this on one version, and it should be Python 3, because
  # pylint has stopped updating for Python 2.
  - if [[ $TRAVIS_PYTHON_VERSION == 3.7 ]]; then python -m pylint --rcfile=.pylintrc gevent; fi

# Submit coverage info
after_success:
  - python -m coverage combine
  - python -m coverage report -i
  - python -m coveralls

notifications:
  email: false


cache:
  pip: true
  directories:
    - $HOME/.venv
    - $HOME/.runtimes
    - $HOME/.wheelhouse
    - $HOME/.ccache
    - $HOME/.libs

before_cache:
    - rm -f $HOME/.cache/pip/log/debug.log
